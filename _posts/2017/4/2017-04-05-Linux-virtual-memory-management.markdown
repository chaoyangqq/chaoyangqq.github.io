---
layout:     post
random-img: true
title:      Linux 虚拟内存管理
subtitle:   Linux Virtual Memory Management
date:       2017-04-05 10:21:17
author:     decaywood
description: 本文介绍了Linux虚拟内存管理机制
keywords: Linux,虚拟内存
tags:
    - Linux
---

Linux，像多数现代内核一样，采用了虚拟内存管理技术。该技术利用了大多数程序的一个典型特征，即访问局部性（locality of reference），以高效使用CPU和RAM（物理内存）资源。大多数程序都展现了两种类型的局部性。

* 空间局部性（Spatial locality）是指程序倾向于访问在最近访问过的内存地址附近的内存（由于指令是顺序执行的，且有时会按顺序处理数据结构）。
* 时间局部性（Temporal locality）是指程序倾向于在不久的将来再次访问最近刚访问过的内存地址（由于循环）。

正是由于访问局部性特征，使得程序即便仅有部分地址空间存在于RAM中，依然可能得以执行。

虚拟内存的规划之一是将每个程序使用的内存切割成小型的、固定大小的“页”（page）单元。相应地，将RAM划分成一系列与虚存页尺寸相同的页帧。任一时刻，每个程序仅有部分页需要驻留在物理内存页帧中；这些页构成了所谓驻留集（resident set）。程序未使用的页拷贝保存在交换区（swap area）内——这是磁盘空间中的保留区域，作为计算机RAM的补充——仅在需要时才会载入物理内存。若进程欲访问的页面目前并未驻留在物理内存中，将会发生页面错误（page fault），内核即刻挂起进程的执行，同时从磁盘中将该页面载入内存。

为支持这一组织方式，内核需要为每个进程维护一张页表（page table）（如下图）。该页表描述了每页在进程虚拟地址空间（virtual address space）中的位置（可为进程所用的所有虚拟内存页面的集合）。页表中的每个条目要么指出一个虚拟页面在RAM中的所在位置，要么表明其当前驻留在磁盘上。

<img src="{{site.cdnurl}}/img/post/2017/Linux-Virtual-Memory-Management.svg" alt="SVG" style="background-color:white">

在进程虚拟地址空间中，并非所有的地址范围都需要页表条目。通常情况下，由于可能存在大段的虚拟地址空间并未投入使用，故而也无必要为其维护相应的页表条目。若进程试图访问的地址并无页表条目与之对应，那么进程将收到一个SIGSEGV信号。

由于内核能够为进程分配和释放页（和页表条目），所以进程的有效虚拟地址范围在其生命周期中可以发生变化。这可能会发生于如下场景：

* 由于栈向下增长超出之前曾达到的位置
* 当在堆中分配或释放内存时，通过调用brk()、sbrk()或malloc函数族来提升program break的位置
* 当调用shmat()连接System V共享内存区时，或者当调用shmdt()脱离共享内存区时
* 当调用mmap()创建内存映射时，或者当调用munmap()解除内存映射时

虚拟内存的实现需要硬件中分页内存管理单元(PMMU)的支持。PMMU把要访问的每个虚拟内存地址转换成相应的物理内存地址，当特定虚拟内存地址所对应的页没有驻留于RAM中时，将以页面错误通知内核。

虚拟内存管理使进程的虚拟地址空间与RAM物理地址空间隔离开来，这带来许多优点：

* 进程与进程、进程与内核相互隔离，所以一进程不能读取或修改另一进程或内核的内存。这是因为每个进程的页表条目指向RAM（或交换区）中截然不同的物理页面集合。
* 适当情况下，两个或者更多进程能够共享内存。这是由于内核可以使不同进程的页表条目指向相同的RAM页。内存共享常发生于如下两种场景：
  * 执行同一程序的多个进程，可共享一份（只读的）程序代码副本。当多个程序执行相同的程序文件（或加载相同的共享库）时，会隐式地实现这一类型的共享。
  * 进程可以使用shmget()和mmap()系统调用显式地请求与其他进程共享内存区。这么做是出于进程间通信的目的。
* 便于实现内存保护机制；也就是说，可以对页表条目进行标记，以表示相关页面内容是可读、可写、可执行亦或是这些保护措施的组合。多个进程共享RAM页面时，允许每个进程对内存采取不同的保护措施；例如，一进程可能以只读方式访问某页面，而另一进程则以读写方式访问同一页面。
* 程序员和编译器、连接器之类的工具无需关注程序在RAM中的物理布局。
* 因为需要驻留在内存中的仅是程序的一部分，所以程序的加载和运行都很快。而且，一个进程所占用的内存（即虚拟内存大小）能够超出RAM容量。
* 虚拟内存管理的最后一个优点是：由于每个进程使用的RAM减少了，RAM中同时可以容纳的进程数量就增多了。这增大了如下事件的概率：在任一时刻，CPU都可执行至少一个进程——因而往往也会提高CPU的利用率。